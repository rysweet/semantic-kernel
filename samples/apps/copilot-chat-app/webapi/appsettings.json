{
  //  Consider populating secrets, such as "Key" properties, from dotnet's user secrets when running locally.
  //  https://learn.microsoft.com/en-us/aspnet/core/security/app-secrets?view=aspnetcore-7.0&tabs=windows#secret-manager       
  //  Values in user secrets take precedence over those in this file.

  "ServicePort": "40443",

  "UseHttp": true, // Set to true to use HTTP instead of HTTPS. Only recommended for development purposes.

  "Completion": {
    "Label": "Completion",
    "AIService": "AzureOpenAI", // Or "OpenAI" when using OpenAI directly
    "DeploymentOrModelId": "gpt-35-turbo", // Azure OpenAI deployment name or OpenAI model to use - Chat completion models only (e.g., 'gpt-3.5-turbo' or 'gpt-4').
    "Endpoint": "" // Your Azure OpenAI endpoint (e.g. https://contoso.openai.azure.com) - Leave blank when using OpenAI.
    // "Key": // dotnet user-secrets set "Completion:Key" "MY_COMPLETION_KEY"
  },

  // Remove or comment out Embedding if no embedding backend is required (one is required only when using
  // embeddings to save "memories" or compare the semantic distance between "memories") 
  "Embedding": {
    "Label": "Embeddings",
    "AIService": "AzureOpenAI", // Or "OpenAI" when using OpenAI directly
    "DeploymentOrModelId": "text-embedding-ada-002", // Azure OpenAI deployment name or OpenAI model to use
    "Endpoint": "" // Your Azure OpenAI endpoint (e.g. https://contoso.openai.azure.com) - Leave blank when using OpenAI directly
    /* "Key": // dotnet user-secrets set "Embedding:Key" "MY_EMBEDDING_KEY" */
  },

  "ChatStore": {
    "Type": "volatile", // Which type of chat store to use - supported values are "volatile", "filesystem", or "cosmos".
    "Filesystem": {
      "FilePath": "./data/chatstore.json"
    },
    "Cosmos": {
      "Database": "CopilotChat",
      "ChatSessionsContainer": "chatsessions",
      "ChatMessagesContainer": "chatmessages"
      /* "ConnectionString": // dotnet user-secrets set "ChatStore:Cosmos:ConnectionString" "MY_COSMOS_CONNECTION_STRING" */
    }
  },

  // Memories stores are used for storing new memories and retrieving semantically similar memories.
  "MemoriesStore": {
    "Type": "volatile", // Which type of memory store to use - supported values are "volatile" or "qdrant"
    "Qdrant": {
      "Host": "http://localhost", // Endpoint of the Qdrant server
      "Port": "6333", // Port of the Qdrant server
      "VectorSize": 1536 // Size of the vectors used by the Qdrant server
    }
  },

  // Directory from which to load semantic skills, if used
  "SemanticSkillsDirectory": "", // Ex: ".\\SemanticSkills" (relative to executable)

  "KeyVaultUri": "", // Optional URI of the Key Vault for secrets, if used - Ex: "https://myvault.vault.azure.net/"

  "AllowedHosts": "*",

  // CORS settings
  "AllowedOrigins": [
    "http://localhost:3000" // The frontend application
  ],

  "Logging": {
    "LogLevel": {
      "Default": "Warning",
      "Microsoft.AspNetCore.Hosting": "Information",
      "Microsoft.Hosting.Lifetime": "Information",
      "Microsoft.SemanticKernel": "Information"
    }
  }
}
